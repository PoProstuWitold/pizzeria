/* GALLERY COMPONENT */

/* Style dla głównego kontenera komponentu */
.gallery-container {
	padding: 10px;
}

/* Style dla galerii zdjęć */
.gallery-images {
	/* ustawia typ wyświetlania elementu na siatkę (grid) */
	display: grid;
	/* definiuje liczbę i rozmiar kolumn w siatce. 
	1fr oznacza, że siatka ma mieć jedną kolumnę, 
	która zajmuje całą dostępną przestrzeń 
	("fr" to jednostka oznaczająca "część dostępnego miejsca"). */
	grid-template-columns: 1fr;
	gap: 2rem;
	margin: 2rem 0;
	justify-items: center;
	align-items: start;
}

/* 
Style dla pojedynczego elementu w galerii.
Jest to mini-kontener z pojedynczym zdjęciem oraz nazwą autora. 
*/
.gallery-item {
	border: 1px solid #ccc;
	padding: 1rem;
	gap: 1rem;
	border-radius: 5px;
	background-color: #f9f9f9;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	transition: background-color 0.3s ease-in-out;
	width: 100%;
}

/* Style po najechaniu na element galerii */
.gallery-item:hover {
	background-color: #f0f0f0;
	cursor: pointer;
}

/* Style dla obrazka w mini kontenerze "gallery-item" w galerii */
.gallery-item img {
	height: 200px;
	width: auto;
	border-radius: 5px;
}

/* 
Style dla tagu "dialog", który odpowiada za modalne okienko typu "pop-up 
Can I Use: 96.08% (https://caniuse.com/dialog)
*/
dialog {
	border-radius: 10px;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
	width: 95%;
}

/* Style dla przycisku zamykającego okienko "dialog" */
#close-dialog {
    background-color: #f44336;
	width: 30px;
	height: 30px;
    color: white;
	font-weight: 900;
    border: none;
    cursor: pointer;
    border-radius: 5px;
    text-align: center;
}

/* Style po najechaniu na przycisk zamykający okienko dialog */
#close-dialog:hover {
    background-color: #e60000;
}

/* Style dla kontenera okienka dialog */
.dialog-container {
	display: flex;
	gap: 1rem;
	flex-direction: column;
	justify-content: stretch;
	align-items: center;
}

/* Style dla nagłówka zawartości kontenera "dialog-container" */
.dialog-header {
    font-size: 1rem;
	display: flex;
	gap: 1rem;
	width: 100%;
	justify-content: space-between;
	align-items: center;
	padding: 10px 0;
	border-bottom: 1px solid #ccc;
}

/* Style dla przycisków przełączania zdjęć w okienku dialog */
.dialog-button {
	border-radius: 10px;
    font-size: 2em;
    background: none;
    border: none;
    cursor: pointer;
	color: black;
	border: 3px solid black;
	background-color: white;
	position: absolute;
	top: 55%;
	width: 3.5rem;
	opacity: 0.5;
	transition: opacity 0.1s ease-in-out;
}

/* Style po najechaniu na przyciski w okienku dialog */
.dialog-button:hover {
	opacity: 1;
}

/* 
Style dla ciała w kontenerze dialog. 
Znajdują się tu przyciski i powiększone zdjęcie w lepszej rozdzielczości 
*/
.dialog-body {
	width: 100%;
	display: flex;
	flex-direction: row;
	gap: 1rem;
}

/* Style dla zdjęcia w okienku dialog */
.dialog-img {
	margin: auto;
	width: auto;
	height: 17rem;
	border-radius: 10px;
}

/* Zapytania o media dla 768px */
@media screen and (min-width: 768px) {
	dialog {
		width: 50%;
	}

	.dialog-img {
		height: 20rem;
	}

	/*
	repeat(auto-fit, minmax(10rem, 1fr)) - funkcją, która automatycznie tworzy tak wiele kolumn, 
	ile zmieści się w kontenerze;
	auto-fit - działa na zasadzie wypełniania dostępnego miejsca w kontenerze jak największą ilością kolumn. 
	Liczba kolumn dostosowuje się do szerokości kontenera;
	minmax(10rem, 1fr) - określa minimalną i maksymalną szerokość każdej kolumny. 
	10rem - minimalna szerokość, a 1fr - maksymalna szerokość;
	fr - jednostka reprezentująca “część dostępnego miejsca”.

	W skrócie: 
	kod tworzy responsywny układ siatki, który automatycznie dostosowuje liczbę 
	i szerokość kolumn do dostępnej przestrzeni
	*/
	.gallery-images {
		grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
	}

	.gallery-item img {
		max-height: 110px;
	}
}

/* Zapytania o media dla 1024px */
@media screen and (min-width: 1024px) {
	.dialog-img {
		height: 25rem;
	}
}

/* 
transform: translateY(-50%); - przesunięcie elementu wzdłuż osi Y (pionowej) o wartość równą -50% jego własnej wysokości.
Przesuwa element o 50% w górę względem swojej pozycji wyjściowej.
*/
/* Style dla przycisku przełączającego zdjęcie na poprzednie */
#prev-dialog {
	left: 1.5rem;
	transform: translateY(-50%);
}


/* Style dla przycisku przełączającego zdjęcie na następne */
#next-dialog {
	right: 1.5rem;
	transform: translateY(-50%);
}